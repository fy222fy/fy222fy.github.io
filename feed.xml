<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://fy222fy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://fy222fy.github.io/" rel="alternate" type="text/html"/><updated>2025-01-07T02:41:48+00:00</updated><id>https://fy222fy.github.io/feed.xml</id><title type="html">blank</title><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://fy222fy.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://fy222fy.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">C++实现不同的排序算法，以及实现过程中的难点</title><link href="https://fy222fy.github.io/blog/2024/sort-c++/" rel="alternate" type="text/html" title="C++实现不同的排序算法，以及实现过程中的难点"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://fy222fy.github.io/blog/2024/sort-c++</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/sort-c++/"><![CDATA[<p>为了查找方便，产生了各种各样地排序算法，根据不同的使用场景，有不同类型的排序方式，如插入排序、交换排序、选择排序、归并排序、基数排序等。 很多人明白不同排序的运作原理，但是并没有自己实现过，这篇文章将分析几种排序方式的原理，并介绍利用c++实现算法过程中用到的小技巧。</p> <p>首先，所有的排序方式如下面的目录所示，一个简单的比较如下表。</p> <table> <tr> <th colspan="3" rowspan="2">排序方式</th> <th colspan="3">时间复杂度</th> <th rowspan="2">空间<br/>复杂度</th> <th rowspan="2">稳定性<br/></th> <th rowspan="2">初始状态影响</th> <th rowspan="2">适用情况<br/></th> <th rowspan="2">适用规模</th> <th colspan="2">比较次数</th> <th rowspan="2">移动次数<br/></th> </tr> <tr> <td>最好<br/></td> <td>平均</td> <td>最坏</td> <td>最小<br/></td> <td>最大</td> </tr> <tr> <td rowspan="11">内<br/>部<br/>排<br/>序</td> <td rowspan="3">插<br/>入<br/>排<br/>序</td> <td>直接插入排序</td> <td>n</td> <td colspan="2">n<sup>2</sup></td> <td>1</td> <td>是<br/></td> <td>越有序越好</td> <td>顺序表<br/>链表<br/></td> <td>&lt;10000<br/></td> <td>n-1<br/></td> <td>n(n-1)/2&lt;/sup&gt;</td> <td>0~n(n-1)/2</td> </tr> <tr> <td>折半插入排序</td> <td>n</td> <td colspan="2">n<sup>2</sup></td> <td>1</td> <td>是</td> <td>越有序越好</td> <td>顺序表</td> <td>&lt;10000<br/></td> <td>log<sub>2</sub>n+1</td> <td>n<sup>2</sup></td> <td>0~n-1</td> </tr> <tr> <td>希尔排序</td> <td>n<sup>1.3</sup></td> <td colspan="2">n<sup>2</sup></td> <td>1</td> <td>否<br/></td> <td>越有序越好</td> <td>顺序表</td> <td>&lt;1000<br/></td> <td colspan="2">&lt;n<sup>2</sup></td> <td>小于直插</td> </tr> <tr> <td rowspan="2">交<br/>换<br/>排<br/>序</td> <td>冒泡排序</td> <td>n</td> <td colspan="2">n<sup>2</sup></td> <td>1</td> <td>是</td> <td>越有序越好</td> <td>顺序表</td> <td>&lt;10000<br/></td> <td colspan="2">n(n-1)/2</td> <td>0~n(n-1)/2</td> </tr> <tr> <td>快速排序</td> <td colspan="2">nlog<sub>2</sub>n</td> <td>n<sup>2</sup></td> <td>log<sub>2</sub>n</td> <td>否</td> <td>有序反而慢</td> <td>顺序表</td> <td>n很大</td> <td>nlog<sub>2</sub>n</td> <td>n(n-1)/2</td> <td></td> </tr> <tr> <td rowspan="2">选<br/>择<br/>排<br/>序</td> <td>简单选择排序</td> <td colspan="3">n<sup>2</sup></td> <td>1</td> <td>否</td> <td>比较次数无关<br/>移动次数有关</td> <td></td> <td>&lt;10000<br/></td> <td>n<sup>2</sup><br/></td> <td>n<sup>2</sup></td> <td>n</td> </tr> <tr> <td>堆排序</td> <td colspan="3">nlog<sub>2</sub>n</td> <td>1</td> <td>否</td> <td>有关<br/>但不怕坏情况</td> <td>顺序表</td> <td>n很大</td> <td colspan="2">nlog<sub>2</sub>n</td> <td></td> </tr> <tr> <td rowspan="3">分<br/>配<br/>式<br/>排<br/>序</td> <td>桶排序</td> <td colspan="3">n+k</td> <td>n+k</td> <td>是</td> <td>基本无关</td> <td>含关键字</td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td>计数排序<br/></td> <td colspan="3">n+max-min</td> <td>max-min</td> <td>是</td> <td>最大最小值<br/>差距越小越好</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td>基数排序<br/></td> <td colspan="3">nd</td> <td>n+k</td> <td>是</td> <td>只能非<br/>负整数排序<br/>最大最小值<br/>差距越小越好</td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td colspan="2">归并排序</td> <td colspan="3">nlog<sub>2</sub>n</td> <td>1</td> <td>是</td> <td>无关</td> <td>顺序表<br/>链表<br/></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td rowspan="2">外<br/>部<br/>排<br/>序</td> <td colspan="2">多路归并排序</td> <td colspan="3">nlog2n</td> <td>n</td> <td>是<br/></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> <tr> <td colspan="2">置换-选择排序</td> <td colspan="3">d(n+r)</td> <td>r</td> <td>是<br/></td> <td></td> <td></td> <td></td> <td></td> <td></td> <td></td> </tr> </table> <p>@[toc]</p> <h2 id="内部排序">内部排序</h2> <h3 id="插入排序insert-sort">插入排序(Insert Sort)</h3> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/><strong>基本思想</strong></li> </ul> <p>插入排序的思想是一次拿一个元素出来，放在前面已经排好顺序的序列中。 类似于扑克牌整牌的过程。 在这个过程中，每一次都有一个元素会落到最终的位置。</p> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/><strong>排序过程</strong></li> </ul> <p>排序过程主要分为三步。 第一步，在待排序列（也就是后面的序列）中提取出第一个元素。 第二步，在已排的有序序列（前面排好的序列）中查找这个元素应该在的位置。 第三步，将该元素插入到它应该在的位置。</p> <p>在第二步查找的过程中，如果使用<em>顺序查找</em>，那么就是直接插入排序，如果使用折半查找，那么就是折半插入排序。 另外，如果抽取出部分序列进行排序，最后再综合排序，那么就是希尔排序。</p> <h4 id="直接插入排序">直接插入排序</h4> <ul> <li><strong>过程</strong>：</li> </ul> <ol> <li>在待排序列中提取第一个元素；</li> <li>用顺序查找的方法查找该元素在前边已排序列的位置；</li> <li>插入该元素。</li> </ol> <ul> <li><strong>适用范围</strong>：顺序表，链表都可以，但链表使用该方法是一大优势，因为插入元素比较简单,不需要移动后续的所有元素。另外，越有序的序列排序速度越快。</li> <li> <p><strong>性能</strong>：直接插入排序要对每个元素进行比较和插入，n个元素，当全部都排序好时，每个元素只需要比较一次，所以最好时间复杂度是o(1)。在最坏和平均情况时每个元素比较的次数大约是n次，所以<strong>时间复杂度o(n<sup>2</sup>)</strong>，因为没有用到额外的存储空间，所以<strong>空间复杂度o(1)</strong>。</p> </li> <li><strong>稳定性</strong>：稳定，但写代码的时候注意插入的时候遇到相同的数据，要插入到已排序列该数据元素之后，这样才能保证稳定性。</li> <li><strong>比较次数</strong>：当序列本身有序的时候，比较的次数是最小的，因为每个元素只需要与其前一个元素（也就是已排元素的最后一个元素）作比较，然后发现它已经比这个元素大，所以只需要比较n-1次。但在最坏情况下，每个元素都要和前面的所有已排元素比较一遍也就是1+2+…+n-1 = n(n-1)/2次。</li> <li> <p><strong>移动次数</strong>：最好情况下，就根本不需要移动。在最坏情况下，每个元素都要使之前的已排元素全部后移一次，也是n(n-1)/2次。</p> </li> <li><strong>代码实现</strong>：首先对整个序列进行遍历，也就是第一步的待排序列取元素。 按照顺序，应该是通过顺序查找的方式找到待插入位置的下标，然后再顺序后移元素，将取出的元素插入到空出的位置。</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void DirectInsertSort1(vector&lt;int&gt; &amp;nums) {
	//默认第一个元素就是一个已排序列，从第二个元素开始向后循环
	int n = nums.size();
	for (int i = 1; i &lt; n; ++i) {//从第二个元素开始遍历待排序列
		int i2 = 0;
		//查找nums[i]元素应该在前面已排元素的哪个位置
		//因为是查找过程，所以可以直接把i这个元素当成哨兵，减少判断界限的语句
		while (nums[i2] &lt; nums[i]) {
			i2++;
		}
		//找到位置以后，从i这个位置依次后移元素
		int temp = nums[i];
		for (int i3 = i; i3 &gt; i2; --i3) {//移动元素的过程
			nums[i3] = nums[i3 - 1];//后移
		}
		//最后把i这个元素放在前面已排序列中应有的位置
		nums[i2] = temp;
	}
}
</code></pre></div></div> <p>上述代码符合直接插入排序的概念，易于理解，但是实际上，查找和插入的过程上没有必要分开，从前往后的查找过程可以改成从提取元素的位置向前查找，并且在查找的过程中就可以移动了。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void DirectInsertSort2(vector&lt;int&gt;&amp; nums) {
	int temp = 0;
	//默认第一个元素就是一个已排序列，从第二个元素开始向后循环
	int n = nums.size();
	for (int i = 1; i &lt; n; ++i) {
		int temp = nums[i];
		int i2 = i - 1;
		for (; i2 &gt;= 0; --i2) {
			//直接从该元素向前查找（因为该元素之前就是已排序列）
			if (nums[i2] &gt; temp) {//只要没找到位置就将元素向后移动
				nums[i2 + 1] = nums[i2];
			}
			else {//找到应有的位置，后面的元素也后移完了
				nums[i2 + 1] = temp;//刚好插入
				break;
			}
		}
		if (i2 &lt; 0) {//如果一直找到头了还没有找到位置，那么就放在最开始
			nums[0] = temp;
		}
	}
}
</code></pre></div></div> <p>更简单地，也可以直接在查找的过程中进行交换，这样就不需要设置一个temp来进行保存了，当查找结束的时候，交换也结束，元素也被交换到了应有的位置。 不过实际上这种方式看起来简单，但会降低算法的性能，交换一个元素至少要三个操作，而多次交换其实都用的是这同一个元素，所以不如上一种算法来的快。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void DirectInsertSort3(vector&lt;int&gt;&amp; nums) {//优化版本
	int temp = 0;
	//默认第一个元素就是一个已排序列，从第二个元素开始向后循环
	int n = nums.size();
	for (int i = 1; i &lt; n; ++i) {
		int temp = nums[i];
		for (int i2 = i - 1; i2 &gt;= 0; --i2) {//向前边查找边交换
			if (nums[i2] &gt; nums[i2 + 1]) {//没找到位置，就交换
				swap(nums[i2], nums[i2 + 1]);
			}
			else {
				break;
			}
		}
	}
}
</code></pre></div></div> <h4 id="折半插入排序binary-insert-sort">折半插入排序(Binary Insert Sort)</h4> <ul> <li><strong>过程</strong>：</li> </ul> <ol> <li>在待排序列中提取第一个元素；</li> <li>用折半查找的方法查找该元素在前边已排序列的位置；</li> <li>插入该元素。</li> </ol> <ul> <li> <p><strong>适用范围</strong>：只能顺序表，链表不行因为折半查找需要跳跃，链表无法跳跃查找。另外，越有序的序列排序速度越快。</p> </li> <li> <p><strong>性能</strong>：虽然折半查找的时间复杂度为log<sub>2</sub>n，但是即便快速查找到了插入位置，后面的元素还是需要依次后移，所以<strong>时间复杂度o(n<sup>2</sup>)</strong>，<strong>空间复杂度o(1)</strong></p> </li> <li><strong>稳定性</strong>：稳定</li> <li><strong>比较次数</strong>：当序列本身有序的时候，比较的次数是最小的，因为每个元素只需要与其前一个元素（也就是已排元素的最后一个元素）作比较，然后发现它已经比这个元素大，所以只需要比较n-1次。但在最坏情况下，每个元素通过折半查找要和前面的元素比较log<sub>2</sub>k次，k是已排序列的个数，所以总共需要比较的次数是log<sub>2</sub>1+log<sub>2</sub>2+…+log<sub>2</sub>n-1 ≈ log<sub>2</sub>(n!) ≈ nlog<sub>2</sub>n (log<sub>2</sub>(n!)和nlog<sub>2</sub>n是同阶函数)</li> <li><strong>移动次数</strong>：最好情况下，就根本不需要移动。在最坏情况下，每个元素都要使之前的已排元素全部后移一次，也是n(n-1)/2次。</li> <li><strong>代码实现</strong>：与直接插入排序的唯一区别就是查找用的是折半查找。</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void BinaryInsertSort(vector&lt;int&gt; &amp;nums){
	//默认第一个元素就是一个已排序列，从第二个元素开始向后循环
	int n = nums.size();
	for (int i = 1; i &lt; n; i++) {//从第二个元素向后遍历
		int low = 0;
		int high = i - 1;
		int mid = (low + high) / 2;
		int target = nums[i];
		while (low &lt;= high) {
			if (nums[mid] &gt; target) {
				high = mid-1;
				mid = low + (high - low) / 2;
			}
			else {
				low = mid+1;
				mid = low + (high - low) / 2;
			}
		}
		//折半查找后，调整一下mid的位置
		if (nums[mid] &lt; target) {
			mid++;
		}
		//最后从i这个位置，向后移动元素，为目标元素空出位置
		for (int i2 = i; i2 &gt; mid; --i2) {
			nums[i2] = nums[i2 - 1];
		}
		nums[mid] = target;
	}
}
</code></pre></div></div> <h4 id="希尔排序">希尔排序</h4> <ul> <li><strong>过程</strong>： 以排序一个20个元素的序列为例 <ol> <li>选取一系列缩小增量序列，选取规则随意，一般是对半选取，如{10,5,2,1}，直到缩小到1。</li> <li>对第一个缩小增量10，选取(1)，(11)两个元素，使用直接插入排序，然后再选取(2)，(12)两个元素，使用直接插入排序….直到选取(10)，(20)两个元素，使用直接插入排序。</li> <li>对第二个缩小增量5，选取(1),(6),(11),(16)四个元素，使用直接插入排序，然后再选取(2),(7),(12),(17)四个元素，使用直接插入排序….直到选取(5),(10),(15),(20)四个元素，使用直接插入排序。</li> <li>继续缩小增量，直到增量为1，选取(1)~(20)这20个元素，使用直接插入排序，这时候序列本身已经基本有序，所以很快就排列完成了。</li> </ol> </li> </ul> <p>注意：增量序列的选取是任意的，不一定非要对半选取。</p> <ul> <li> <p><strong>适用范围</strong>：只能顺序表，链表不行因为无法跳跃查找。希尔排序也是越有序越好。</p> </li> <li> <p><strong>性能</strong>：<strong>时间复杂度o(n<sup>1.3</sup>)~o(n<sup>2</sup>)</strong>，希尔排序时间复杂度的下限是nlog<sub>2</sub>n，没有快速排序快，但快速排序在数据已经有序的时候，会变得非常慢，所以可以建议在任何情况下先使用希尔排序进行排序。由于没有用到额外辅助空间，所<strong>空间复杂度o(1)</strong>。希尔排序之所以比直接插入排序快，是因为通过大增量的排序，一个元素已经大致移动到了它最终该在的位置上了，所以它总体上不需要像直接插入排序那样移动那么多次。</p> </li> <li> <p><strong>稳定性</strong>：稳定</p> </li> <li> <p><strong>代码实现</strong>：</p> </li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void ShellSort(vector&lt;int&gt; &amp;nums) {
	int n = nums.size();
	vector&lt;int&gt; temp;
	for (int gap = n / 2; gap &gt; 0; gap /= 2) {//对每一种增量进行排序
		for (int i = 0; i &lt; gap; i++) {//对该种增量下的全部子序列进行排序
			for (int ii = i + gap; ii &lt; n; ii += gap) {//对该子序列进行直插排序
				//以下是直接插入排序的过程
				int temp = nums[ii];
				int i2 = ii - gap;
				for (; i2 &gt;= i; i2 -= gap) {
					if (nums[i2] &gt; temp) {
						nums[i2 + gap] = nums[i2];
					}
					else {
						nums[i2 + gap] = temp;
						break;
					}
				}
				if (i2 &lt; 0) {
					nums[i] = temp;
				}
			}
		}
	}
</code></pre></div></div> <h3 id="交换排序swap-sort">交换排序(Swap Sort)</h3> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/><strong>基本思想</strong></li> </ul> <p>交换排序的基本思想是相邻的元素两两之间进行比较，然后根据大小关系进行交换，使得元素逐渐有序。</p> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/><strong>特征</strong>：每次都会有一个元素到达最终位置。</li> </ul> <h4 id="冒泡排序bubble-sort">冒泡排序(Bubble Sort)</h4> <ul> <li> <p><strong>过程</strong>： 以从从头到尾，两两元素之间进行比较，并根据大小进行交换，在一趟冒泡排序后，最大的元素就冒到最后面去了，然后剩下的元素再次进行，一直冒泡n次，就有序了。</p> </li> <li> <p><strong>适用范围</strong>：顺序表，链表。</p> </li> <li> <p><strong>稳定性</strong>：稳定。</p> </li> <li> <p><strong>性能</strong>：在最好的情况下，已经有序，时间复杂度o(n)，平均和最坏的<strong>时间复杂度都是o(n<sup>2</sup>)</strong>，<strong>空间复杂度o(1)</strong>。</p> </li> <li><strong>稳定性</strong>：稳定</li> <li><strong>比较次数</strong>：冒泡排序总要搞那么n-1轮，所以比较次数一定是n(n-1)/2,。</li> <li><strong>移动次数</strong>：当已经有序的情况下，冒泡排序不需要移动元素，当初始状态是反序时，冒泡排序每一趟要将元素从起始位置移动到该趟的最后边，n-1趟中，每一趟移动的次数分别是n-1，n-1…..,1，所以最多移动的次数是n(n-1)/2。</li> <li><strong>代码实现</strong>：</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void BubbleSort(vector&lt;int&gt; &amp;nums) {	
	for (int n = nums.size(); n &gt; 1; n--) {//遍历未排序的序列
		for (int i = 0; i + 1 &lt; n; i++) {//遍历每两个相邻的元素
			if (nums[i] &gt; nums[i + 1]) {//比较并交换
				swap(nums[i], nums[i + 1]);
			}
		}
	}
}
</code></pre></div></div> <h4 id="快速排序quick-sort">快速排序(Quick Sort)</h4> <ul> <li><strong>过程</strong>： 基于分治法的原则，递归地求解问题。</li> </ul> <ol> <li>随意选取一个元素（可以是首元素也可以是尾元素也可以是随机一个元素），然后将它放在头部或者尾部。放在头部是左基准快排，放在末尾是右基准快排。</li> <li>通过交换的方式（具体2种方法见代码实现），将该基准元素放在其最终排序的位置，即左边的元素均小于它，右边的元素均大于它。</li> <li>递归地将左右两边的子序列快速排序。</li> </ol> <ul> <li> <p><strong>适用范围</strong>：顺序表，链表，其中的数据最好较为随机，有序反而排序可能变慢。</p> </li> <li> <p><strong>性能</strong>：在最好的情况下，<strong>时间复杂度o(nlog<sub>2</sub>n)</strong>，平均下来也是o(nlog<sub>2</sub>n)，最坏的时间复杂度都是o(n<sup>2</sup>)，<strong>空间复杂度o(log<sub>2</sub>n)~oo(n)</strong>。</p> </li> </ul> <p><strong>问：如何计算快速排序的时间复杂度？</strong></p> <ol> <li>递归分析法</li> </ol> <p>首先分析最坏情况，当序列本身已经有序，那么n个元素，分成两个部分，一个部分的长度为n-1，另一个部分长度为0。这样就需要递归n次。在第一次，需要把基准元素比较n-1次，第二次递归，需要比较n-2次….最后需要比较1次，所以总共执行的比较次数是n(b-1)/2次，时间复杂度是o(n)。</p> <p>在正常情况下，n个元素，分成两个部分递归，一个部分长a，另一个部分长b，有a+b=n-1的关系。其中，a序列需要执行的比较次数为a，b序列需要执行的比较次数为b，所以这一层递归需要执行的比较次数是n-1，同理，下一层的4个递归序列总共加起来要执行的比较次数为n-2。按照递归树，n个元素的递归树，其高度为log<sub>2</sub>(n+1)，而根据上面的分析，每一层需要执行的比较次数已经确定，所以总共需要执行的比较次数大约为nlog<sub>2</sub>n，这既是算法的最差时间复杂度，也是算法的平均复杂度。</p> <ol> <li>主定理法</li> </ol> <p>假设有递推关系式T(n)=aT(n/b)+f(n)，其中为n问题规模，a为递推的子问题数量，n/b为每个子问题的规模（假设每个子问题的规模基本一样），f(n)为递推以外进行的计算工作。</p> <p>(1) 若f(n)=o(n<sup>log<sub>b</sub>a-ε</sup>),ε&gt;0，那么T(n)=o(n<sup>log<sub>b</sub>a</sup>)。</p> <p>(2) 若f(n)=o(n<sup>log<sub>b</sub>a</sup>)，那么T(n)=o(n<sup>log<sub>b</sub>a</sup>logn)。</p> <p>(3) 若f(n)=o(n<sup>log<sub>b</sub>a+ε</sup>),ε&gt;0，且对于某个常数c&lt;1和所有充分大的n有af(n/b)≤cf(n),那么那么T(n)=o(f(n))。</p> <p>在快速排序中，a = 2, b = 2, f(n) = o(n)，所以f(n)满足第二种情况，所以直接根据主定理，可以判断其算法的时间复杂度为o(nlog<sub>2</sub>n)</p> <p><strong>问：如何计算快速排序的空间复杂度？</strong></p> <p>递归算法的空间复杂度=递归调用的深度×每次递归调用的额外空间</p> <p>在最坏情况下，递归树的深度为n，每个递归实例并没有额外的空间使用，所以最差空间复杂度为o(n)。</p> <p>在正常情况下，递归树的深度为log<sub>2</sub>n，无额外空间使用，所以空间复杂度为o(log<sub>2</sub>n)。</p> <ul> <li><strong>稳定性</strong>：不稳定</li> <li><strong>比较次数</strong>：在最坏的情况下，已经有序，退化为冒泡排序算法，第一个元素需要比较n-1次，第二个元素需要比较n-2次，总共需要比较最多n(n-1)/2次。在一般情况下，根据时间复杂度计算，总共需要比较nlog<sub>2</sub>n次。</li> <li><strong>代码实现</strong>：</li> </ul> <p>第一种方法，从序列最开始进行遍历，每当遇到一个比基准元素小的元素，就把它扔到前面去，遍历结束后，所有比他小的都扔在了前面，剩下的就是比它大的，然后把基准元素放在中间。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void QuickSort(vector&lt;int&gt;&amp; nums) {
	QuickRecursion2(nums, 0, nums.size()-1);
}
void QuickRecursion(vector&lt;int&gt;&amp; nums, int low, int high) {
	if (low &gt;= high) {//结束循环的标志是待排子序列已经长度为1
		return;
	}
	//右基准快排
	//（实际上可以随机一个元素并放在右边作为基准，防止待排序列本身有序）
	int key = nums[high];
	int mid = low;//找到基准元素的最终位置mid，保证左小于它，右大于它
	for (int i = low; i &lt;= high; i++) {
		if (nums[i] &lt; key) {//每当遇到一个比基准元素小的数字
			swap(nums[mid], nums[i]);//就把它和mid交换，并++mid
			mid++;
		}
	}
	//找到最终位置后，将它和基准元素high交换
	swap(nums[mid], nums[high]);
	//递归地解决左序列和右序列的排序问题
	QuickRecursion(nums, low, mid - 1);
	QuickRecursion(nums, mid + 1, high);
}
</code></pre></div></div> <p>第二种方法，设置一个low指针一个high指针，low指针从前向后，找到一个比基准元素大的数字，与high指针对换，然后high指针从后向前，找到一个比基准元素小的数字，与low指针对换，直到low=high，就找到了该基准元素的位置。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void QuickSort(vector&lt;int&gt;&amp; nums) {
	QuickRecursion2(nums, 0, nums.size()-1);
}
void QuickRecursion2(vector&lt;int&gt;&amp; nums, int low, int high) {
	if (low &gt;= high) {//结束循环的标志是待排子序列已经长度为1
		return;
	}
	//右基准快排
	//以最右边的数作为基准
	int key = nums[high];
	int l = low;
	int h = high;
	while (l != h) {//寻找mid的位置
		//low从前向后，找到比key大的，就和high作交换
		for (; l != h; l++) {
			if (nums[l] &gt; key) {
				swap(nums[l], nums[h]);
				break;
			}
		}
		//high从前向后，找到比key小的，就和low作交换
		for (; h!=l; h--) {
			if (nums[h] &lt; key) {
				swap(nums[h], nums[l]);
				break;
			}
		}			
	}
	//交换结束后，l和h的位置都指向mid，并且基准元素也被交换到了这个位置
	int mid = l;
	QuickRecursion2(nums, low, mid - 1);
	QuickRecursion2(nums, mid + 1, high);
}
</code></pre></div></div> <h3 id="选择排序">选择排序</h3> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/><strong>基本思想</strong></li> </ul> <p>从所有元素中选择一个最小的，放在第一位，然后再选、再选、再选。</p> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/><strong>特征</strong>：每次都会有一个元素到达最终位置。</li> </ul> <h4 id="简单选择排序">简单选择排序</h4> <ul> <li><strong>过程</strong>：从未排序的序列中找出最小的，和头交换，然后去掉头，再继续找。</li> </ul> <p>-<strong>适用范围</strong>：顺序表，链表。</p> <ul> <li><strong>性能</strong>：<strong>时间复杂度o(n<sup>2</sup>)</strong> = 比较次数o(n<sup>2</sup>)+移动次数o(n)，不论初始状态如何都要比较n<sup>2</sup>次，但是移动的次数不一定。 <strong>空间复杂度o(1)</strong>。</li> <li><strong>稳定性</strong>：不稳定。</li> <li><strong>比较次数</strong>：每一个元素都需要比较n<sup>2</sup>次才能选择出来，所以比较次数永远是n<sup>2</sup>次。</li> <li> <p><strong>移动次数</strong>：每次选出来一个元素以后，只需要移动一次即可，所以总共的移动次数是n。</p> </li> <li><strong>代码实现</strong>： <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void SelectionSort(vector&lt;int&gt;&amp; nums) {
  int n = nums.size();
  int temp = INT_MAX;//保存最小的元素
  int index = 0;
  for (int i = 0; i &lt; n; i++) {//遍历整个序列
      for (int i2 = i; i2 &lt; n; i2++) {//
          if (nums[i2] &lt; temp) {//找到最小的元素
              temp = nums[i2];
              index = i2;
          }
      }
      swap(nums[i], nums[index]);//与当前的头元素交换
      temp = INT_MAX;
  }
}
</code></pre></div> </div> </li> </ul> <h4 id="堆排序">堆排序</h4> <ul> <li><strong>过程</strong>： <ol> <li>把序列看成是一个完全二叉树（注意只是看成，不是转换，实际上序列还是顺序存储结构）。</li> <li>通过筛选方式将这个树化为<strong>大根堆</strong>（所有非叶子结点的值大于或等于其子节点的值）。筛选的方法是从i=n/2-1（n为元素个数）这个点开始，比较其与其孩子的关系，并作交换，然后再比i-1，一直比到第一个节点，每一次比较都要让整个树满足定义，即每一个节点都满足比其孩子大的性质。</li> <li>输出顶端最大元素（输出的方式是将其与末尾元素替换，末尾元素时最大元素，下一次不参与建堆）。</li> <li>从头结点（刚刚缓过来的末尾元素）开始再一次构建大根堆。</li> <li>输出-构建直到所有的元素都已经输出，这时正好排序成为了升序序列。</li> </ol> </li> <li> <p><strong>适用范围</strong>：顺序表。和初始状态基本无关，堆排序的最大好处，就是不怕任何坏情况，所有情况都能在nlog<sub>2</sub>n的时间内完成。</p> </li> <li><strong>性能</strong>：<strong>时间复杂度o(nlog<sub>2</sub>n)</strong>， <strong>空间复杂度o(1)</strong>。</li> </ul> <p>问：堆排序的时间复杂度如何计算？</p> <p>堆排序需要使用到递归，总共有两个过程会影响到时间复杂度。第一个过程是初始化建堆的过程，第二个阶段是不断输出堆顶元素，调整剩余堆的过程。</p> <p>在第一阶段，我们从n/2-1这个非叶子结点开始，比较其与孩子的大小关系（这作为一个基本操作），然后一直比到第一个根节点，总共要比n/2-1个节点。每个节点比较的次数，取决于其所在的层次。例如，倒数第二层的非叶子结点，只比较其与下一层的关系；倒数第三层的非叶子结点，在比较与其孩子关系时，如果发生交换，那么还要递归地保证其子树也是符合大根堆定义的，所以其孩子也要比较一次，直到最后一层，所以要比较2次。可见，假设树的高度是h，那么第i层的元素，最多都要比较h-i次。</p> <p>对于一个n个元素的序列，把它看成树，其树的高度为h=log<sub>2</sub>n，拿第i层来分析，第i层一共有2<sup>i-1</sup>个节点，每个节点要比较h-i次，所以该层总共要比较的次数是</p> <pre><code class="language-math">a_i = 2^{i-1}(h-i) = h2^{i-1}-i2^{i-1}
</code></pre> <p>总共需要比较的层数是从1~h-1（因为h-1是倒数第二层）。也就是说要求a<sub>i</sub>的前h-1项和</p> <pre><code class="language-math">S_m = (2^0h+2^1h+...+2^{m-1}h) - (1*2^0+2*2^1+...+i*2^{i-1})
</code></pre> <p>S<sub>i</sub>的左半部分是等比数列，根据等比数列前m项和，为(2<sup>m</sup>-1)h，右半部分为差比数列，运用错位相减法，可得其前m项和为(m-1)2<sup>m</sup>-1，那么可得总体的前m项和为</p> <pre><code class="language-math">S_m = (2^{m}-1)h-(m-1)2^{m}-1
</code></pre> <p>带入h-1，得到前h-1项和为</p> <pre><code class="language-math">S_{h-1} = n-log_2n-1
</code></pre> <p>可以发现，增长速度最快的是n项，所以在初始化建堆过程中，算法的<strong>时间复杂度为o(n)</strong>。</p> <p>在第二阶段，我们要反复地将大根堆顶部元素输出（与末尾元素交换），并重新建堆。这个过程显然要重复n次，因为堆的高度是h=log<sub>2</sub>n，所以第一次最多要比较的次数为log<sub>2</sub>n次，第二次最多要比较的次数为log<sub>2</sub>n-1次……最后一次只需要比较log<sub>2</sub>1次。所以共需要执行的比较次数最多为</p> <pre><code class="language-math">log_2n +log_2(n-1)+...+log_2(1) = log_2(n!) 
</code></pre> <p>因为log<sub>2</sub>n!和nlog<sub>2</sub>n是同阶函数，所以第二步重建堆的<strong>时间复杂度为o(nlog<sub>2</sub>n)</strong>。</p> <p>综合可得，堆排序的<strong>时间复杂度为</strong>o(n)+o(nlog<sub>2</sub>n) = <strong>o(nlog<sub>2</sub>n)</strong></p> <ul> <li><strong>稳定性</strong>：不稳定。</li> <li><strong>比较次数</strong>：上述对时间复杂度的分析，可以看出堆排序的比较次数总是o(n)+o(nlog<sub>2</sub>n) = o(nlog<sub>2</sub>n)</li> <li><strong>代码实现</strong>：</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void HeapSort(vector&lt;int&gt;&amp; nums) {
	int n = nums.size();
	for (int i = n / 2 - 1; i &gt;= 0; i--) {
		//首先从n/2-1这个节点开始，依次向上构建大根堆
		AdjustHeap(nums, n, i);
	}
	//将堆顶元素与末尾元素交换（也就是输出堆顶元素）
	swap(nums[0], nums[n - 1]);
	//默认剩余堆的元素少了一个
	for (int i = n-1; i &gt; 0; i--) {
		//对剩余的堆进行大根堆调整
		AdjustHeap(nums,i,0);
		//输出元素
		swap(nums[0], nums[i-1]);
	}

}
//构建大根堆,n是长度，start是调整位置，自上而下调整
void AdjustHeap(vector&lt;int&gt;&amp; nums, int n, int start) {
	int lc = 2 * start + 1;
	int rc = lc + 1;
	int maxindex = start;
	if (rc &lt; n) {//如果该节点含有两个子节点，选取大的子节点交换
		if (nums[rc] &gt; nums[lc]) {
			maxindex = rc;
		}
		else {
			maxindex = lc;
		}
		if (nums[maxindex] &lt; nums[start]) {
			maxindex = start;
		}
	}
	else if (lc &lt; n) {//如果该节点只含有左儿子，那么比较并交换
		if (nums[lc] &gt; nums[start]) {
			maxindex = lc;
		}
	}
	else {//如果没孩子，那么就不管了
		maxindex = start;
	}
	if (maxindex != start) {
		//交换后，递归地解决被交换孩子节点的子树
		swap(nums[maxindex], nums[start]);
		AdjustHeap(nums, n, maxindex);
	}
	
}
</code></pre></div></div> <h3 id="归并排序">归并排序</h3> <ul> <li><strong>过程</strong>： <ol> <li>先将n个元素看成是n个单元素有序表；</li> <li>通过merge函数将两个有序表之间归并；</li> <li>通过merge函数将再将两个有序表之间归并（因为表内本身有序，所以很快）；</li> <li>一直到只剩一个大的有序表，或者只剩一个元素，单独处理一下。</li> </ol> </li> <li> <p><strong>适用范围</strong>：顺序表，链表。尤其适用于大量数据的外部排序。</p> </li> <li> <p><strong>性能</strong>：总共n个元素，两两归并，两两再归并，可以形成满二叉树，树的叶子节点共有n个，根据树的性质，共有log<sub>2</sub>n+1层，其中，每一层都要比较n次元素，所以<strong>时间复杂度o(nlog<sub>2</sub>n)</strong>。归并排序中，在merge的过程中，需要一个辅助表来进行临时排序存储，这个表的长度为n，所以 <strong>空间复杂度o(n)</strong>，当然，如果通过旋转等操作，让归并的过程中不使用辅助空间，也可以让归并函数迭代实现的的空间复杂度变为o(1)，但是递归实现的归并排序最少也要o(log<sub>2</sub>n)。</p> </li> <li> <p><strong>稳定性</strong>：稳定。</p> </li> <li><strong>代码实现</strong>：</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void MergeSort(vector&lt;int&gt; &amp;nums) {
	int n = nums.size();
	MergeSortRecursion(nums, 0, n-1);
}
void MergeSortRecursion(vector&lt;int&gt; &amp;nums, int start, int end) {
	//递归地将序列二分
	if (end &lt;= start) {
		return;
	}
	int n = end - start + 1;
	int mid = start + n / 2;
	//对左右序列分别递归地求解问题
	MergeSortRecursion(nums, start,mid - 1);
	MergeSortRecursion(nums, mid, end);
	//左右序列此时都已经有序，然后通过merge函数合并左右序列
	Merge(nums, start, mid - 1, mid, end);
}
void Merge(vector&lt;int&gt; &amp;nums, int s1, int e1, int s2, int e2) {
	vector&lt;int&gt; out;//辅助数组
	int i1 = s1, i2 = s2;
	//拿出左右序列的第一个和第一个比，哪个小就把哪个放在辅助数组，然后继续
	while (i1 &lt;= e1 &amp; i2 &lt;= e2) {
		if (nums[i1] &lt; nums[i2]) {
			out.push_back(nums[i1]);
			i1++;
		}
		else {
			out.push_back(nums[i2]);
			i2++;
		}
	}
	//把剩余一个（肯定是都很大的元素）再依次放进辅助空间
	for (; i1 &lt;= e1; i1++) {
		out.push_back(nums[i1]);
	}
	for (; i2 &lt;= e2; i2++) {
		out.push_back(nums[i2]);
	}	
	//把辅助数组的内容再放回原数组
	for (int i = 0,i2 = s1; i &lt;= e2 - s1; i++,i2++) {
		nums[i2] = out[i];
	}
}
</code></pre></div></div> <h2 id="分配式排序桶子排序distribution-sort">分配式排序/桶子排序(Distribution Sort)</h2> <p>上述提到的所有排序方式都是基于比较的排序方式，通过两两元素之间的比较来判断元素应当处在的位置，而分配式排序非比较式的排序，它是通过每个元素内的的部分资讯（关键字），将要排序的元素分配至某些“桶”中。如通过个十百千位关键字的比较，再比如通过日期的年月日关键字的比较，或者姓名中姓的比较等。</p> <p>桶排序是分配式排序的基本原理，基数排序是桶排序在正整数排序中的一个特例应用，计数排序是桶排序在数字最大最小差值小的情况下适用的一个特例。</p> <p>分配式排序都是稳定的。</p> <h3 id="桶排序">桶排序</h3> <ul> <li><strong>过程</strong>：基本思路是将待排序元素划分到不同的桶。</li> </ul> <ol> <li>先扫描一遍序列求出最大值 maxV 和最小值 minV，然后确定一个桶的个数 k，</li> <li>把区间 [minV, maxV]均匀划分成k个区间，每个区间就是一个桶。将序列中的元素分配到各自的桶。</li> <li>对每个桶内的元素进行排序。可以选择任意一种排序算法。</li> <li>将各个桶中的元素合并成一个大的有序序列。</li> </ol> <ul> <li><strong>适用范围</strong>：序列元素含有多关键字可供比较。</li> <li> <p><strong>性能</strong>：当 k 接近于n时，桶排序的时间复杂度就可以近似认为是 O(n) 的。即桶越多，时间效率就越高，而桶越多，空间就越大（k=n就是计数排序）。</p> </li> <li><strong>稳定性</strong>：稳定</li> <li>代码实现：</li> </ul> <h3 id="计数排序">计数排序</h3> <ul> <li><strong>过程</strong>：是一种O(n)的排序算法，但耗费空间较多。 <ol> <li>开一个长度为 max-min+1 的数组。</li> <li>扫描一遍原始数组，以当前值- minValue 作为下标，将该下标的计数器增1。</li> <li>收集。扫描一遍计数器数组，按顺序把值收集起来。</li> </ol> </li> </ul> <p>举个例子， nums=[2, 1, 3, 1, 5] , 首先扫描一遍获取最小值和最大值，maxValue=5 , minValue=1 ，于是开一个长度为5的计数器数组 counter ，</p> <ol> <li>分配。统计每个元素出现的频率，得到 counter=[2, 1, 1, 0, 1] ，例如 counter[0] 表示值 0+minValue=1 出现了2次。</li> <li>收集。 counter[0]=2表示1出现了两次，那就向原始数组写入两个1，3。counter[1]=1 表示2出现了1次，那就向原始数组写入一个2，依次类推，最终原始数组变为 [1,1,2,3,5] ，排序好了。</li> </ol> <p>计数排序本质上是一种特殊的桶排序，当桶的个数最大的时候，就是计数排序。</p> <ul> <li><strong>适用范围</strong>：最大最小值差距不要太大，不然开辟的数组太大占用太多空间。</li> <li><strong>性能</strong>：</li> </ul> <h3 id="基数排序">基数排序</h3> <ul> <li><strong>过程</strong>： <ol> <li>将所有待排序整数（注意，必须是非负整数）统一为位数相同的整数，位数较少的前面补零。一般用10进制，</li> <li>从最低位开始，依次进行一次稳定排序（不稳定的话上一次的结果放到下一次可能就乱了）。这样从最低位一直到最高位排序完成以后，整个序列就变成了一个有序序列。</li> </ol> </li> </ul> <p>举个例子，有一个整数序列，0, 123, 45, 386, 106，下面是排序过程：</p> <p>第一次排序，个位，000 123 045 386 106，无任何变化</p> <p>第二次排序，十位，000 106 123 045 386</p> <p>第三次排序，百位，000 045 106 123 386</p> <p>最终结果，0, 45, 106, 123, 386, 排序完成。</p> <ul> <li><strong>适用范围</strong>：含关键字的正整数排序。</li> </ul> <h2 id="外部排序">外部排序</h2> <h3 id="多路平衡归并">多路平衡归并</h3> <h3 id="置换-选择排序">置换-选择排序</h3>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with tabs2</title><link href="https://fy222fy.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs2"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://fy222fy.github.io/blog/2024/tabs</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="d39046fe-7e38-42ee-97b2-0d4040278e11" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="d39046fe-7e38-42ee-97b2-0d4040278e11" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="5b6dabe1-8ed3-409a-8351-ce03e6fd0dbf" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="5b6dabe1-8ed3-409a-8351-ce03e6fd0dbf" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="c39fb393-1973-4a68-9e97-f6c19f2a267d" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="c39fb393-1973-4a68-9e97-f6c19f2a267d" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://fy222fy.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://fy222fy.github.io/blog/2024/typograms</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://fy222fy.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://fy222fy.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://fy222fy.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://fy222fy.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://fy222fy.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://fy222fy.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://fy222fy.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://fy222fy.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://fy222fy.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://fy222fy.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry><entry><title type="html">a post with geojson</title><link href="https://fy222fy.github.io/blog/2024/geojson-map/" rel="alternate" type="text/html" title="a post with geojson"/><published>2024-01-26T17:57:00+00:00</published><updated>2024-01-26T17:57:00+00:00</updated><id>https://fy222fy.github.io/blog/2024/geojson-map</id><content type="html" xml:base="https://fy222fy.github.io/blog/2024/geojson-map/"><![CDATA[<p>This is an example post with some <a href="https://geojson.org/">geojson</a> code. The support is provided thanks to <a href="https://leafletjs.com/">Leaflet</a>. To create your own visualization, go to <a href="https://geojson.io/">geojson.io</a>.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><category term="maps"/><summary type="html"><![CDATA[this is what included geojson code could look like]]></summary></entry></feed>